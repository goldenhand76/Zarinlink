// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: project.sql

package db

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    portfolio_id,
    title,
    start_date,
    end_date
) VALUES (
    $1, $2, $3, $4
) RETURNING id, portfolio_id, title, start_date, end_date
`

type CreateProjectParams struct {
	PortfolioID int64        `json:"portfolio_id"`
	Title       string       `json:"title"`
	StartDate   sql.NullTime `json:"start_date"`
	EndDate     sql.NullTime `json:"end_date"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.PortfolioID,
		arg.Title,
		arg.StartDate,
		arg.EndDate,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProject, id)
	return err
}

const getProjects = `-- name: GetProjects :many
SELECT id, portfolio_id, title, start_date, end_date FROM projects
WHERE portfolio_id = $1
ORDER BY start_date DESC
`

func (q *Queries) GetProjects(ctx context.Context, portfolioID int64) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjects, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Project{}
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.PortfolioID,
			&i.Title,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET title = $2,
    start_date = $3,
    end_date = $4
WHERE id = $1
RETURNING id, portfolio_id, title, start_date, end_date
`

type UpdateProjectParams struct {
	ID        int64        `json:"id"`
	Title     string       `json:"title"`
	StartDate sql.NullTime `json:"start_date"`
	EndDate   sql.NullTime `json:"end_date"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject,
		arg.ID,
		arg.Title,
		arg.StartDate,
		arg.EndDate,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.Title,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
