// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: skill.sql

package db

import (
	"context"
)

const createSkill = `-- name: CreateSkill :one
INSERT INTO skills (
    portfolio_id,
    title,
    progress
) VALUES (
    $1, $2, $3
) RETURNING id, portfolio_id, title, progress
`

type CreateSkillParams struct {
	PortfolioID int64  `json:"portfolio_id"`
	Title       string `json:"title"`
	Progress    string `json:"progress"`
}

func (q *Queries) CreateSkill(ctx context.Context, arg CreateSkillParams) (Skill, error) {
	row := q.db.QueryRowContext(ctx, createSkill, arg.PortfolioID, arg.Title, arg.Progress)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.Title,
		&i.Progress,
	)
	return i, err
}

const deleteSkill = `-- name: DeleteSkill :exec
DELETE FROM skills
WHERE id = $1
`

func (q *Queries) DeleteSkill(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSkill, id)
	return err
}

const getSkills = `-- name: GetSkills :many
SELECT id, portfolio_id, title, progress FROM skills 
WHERE portfolio_id = $1
ORDER BY id
`

func (q *Queries) GetSkills(ctx context.Context, portfolioID int64) ([]Skill, error) {
	rows, err := q.db.QueryContext(ctx, getSkills, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Skill{}
	for rows.Next() {
		var i Skill
		if err := rows.Scan(
			&i.ID,
			&i.PortfolioID,
			&i.Title,
			&i.Progress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSkill = `-- name: UpdateSkill :one
UPDATE skills   
SET title = $2,
    progress = $3
WHERE id = $1   
RETURNING id, portfolio_id, title, progress
`

type UpdateSkillParams struct {
	ID       int64  `json:"id"`
	Title    string `json:"title"`
	Progress string `json:"progress"`
}

func (q *Queries) UpdateSkill(ctx context.Context, arg UpdateSkillParams) (Skill, error) {
	row := q.db.QueryRowContext(ctx, updateSkill, arg.ID, arg.Title, arg.Progress)
	var i Skill
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.Title,
		&i.Progress,
	)
	return i, err
}
