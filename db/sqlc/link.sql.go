// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: link.sql

package db

import (
	"context"
	"database/sql"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links (
    portfolio_id,
    title,
    url
) VALUES (
    $1, $2, $3
) RETURNING id, portfolio_id, title, url
`

type CreateLinkParams struct {
	PortfolioID sql.NullInt64 `json:"portfolio_id"`
	Title       string        `json:"title"`
	Url         string        `json:"url"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, createLink, arg.PortfolioID, arg.Title, arg.Url)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.Title,
		&i.Url,
	)
	return i, err
}

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM links
WHERE id = $1
`

func (q *Queries) DeleteLink(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteLink, id)
	return err
}

const getLinks = `-- name: GetLinks :many
SELECT id, portfolio_id, title, url FROM links 
WHERE portfolio_id = $1 
ORDER BY id
`

func (q *Queries) GetLinks(ctx context.Context, portfolioID sql.NullInt64) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, getLinks, portfolioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Link{}
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.PortfolioID,
			&i.Title,
			&i.Url,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLink = `-- name: UpdateLink :one
UPDATE links
SET title = $2,
    url = $3
WHERE id = $1   
RETURNING id, portfolio_id, title, url
`

type UpdateLinkParams struct {
	ID    int64  `json:"id"`
	Title string `json:"title"`
	Url   string `json:"url"`
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, updateLink, arg.ID, arg.Title, arg.Url)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.PortfolioID,
		&i.Title,
		&i.Url,
	)
	return i, err
}
