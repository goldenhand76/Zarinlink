// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: portfolio.sql

package db

import (
	"context"
	"database/sql"
)

const createPortfolio = `-- name: CreatePortfolio :one
INSERT INTO portfolio (
    photo,
    aboutme
) VALUES (
    $1, $2
) RETURNING id, photo, aboutme
`

type CreatePortfolioParams struct {
	Photo   sql.NullString `json:"photo"`
	Aboutme sql.NullString `json:"aboutme"`
}

func (q *Queries) CreatePortfolio(ctx context.Context, arg CreatePortfolioParams) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, createPortfolio, arg.Photo, arg.Aboutme)
	var i Portfolio
	err := row.Scan(&i.ID, &i.Photo, &i.Aboutme)
	return i, err
}

const deletePortfolio = `-- name: DeletePortfolio :exec
DELETE FROM portfolio WHERE id = $1
`

func (q *Queries) DeletePortfolio(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePortfolio, id)
	return err
}

const getPortfolio = `-- name: GetPortfolio :one
SELECT id, photo, aboutme FROM portfolio
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPortfolio(ctx context.Context, id int64) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, getPortfolio, id)
	var i Portfolio
	err := row.Scan(&i.ID, &i.Photo, &i.Aboutme)
	return i, err
}

const getPortfolioForUpdate = `-- name: GetPortfolioForUpdate :one
SELECT id, photo, aboutme FROM portfolio
WHERE id = $1 LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) GetPortfolioForUpdate(ctx context.Context, id int64) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, getPortfolioForUpdate, id)
	var i Portfolio
	err := row.Scan(&i.ID, &i.Photo, &i.Aboutme)
	return i, err
}

const listPortfolios = `-- name: ListPortfolios :many
SELECT id, photo, aboutme FROM portfolio ORDER BY id LIMIT $1 OFFSET $2
`

type ListPortfoliosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPortfolios(ctx context.Context, arg ListPortfoliosParams) ([]Portfolio, error) {
	rows, err := q.db.QueryContext(ctx, listPortfolios, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Portfolio{}
	for rows.Next() {
		var i Portfolio
		if err := rows.Scan(&i.ID, &i.Photo, &i.Aboutme); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePortfolio = `-- name: UpdatePortfolio :one
UPDATE portfolio 
SET photo = $2,
    aboutme = $3
WHERE id = $1
RETURNING id, photo, aboutme
`

type UpdatePortfolioParams struct {
	ID      int64          `json:"id"`
	Photo   sql.NullString `json:"photo"`
	Aboutme sql.NullString `json:"aboutme"`
}

func (q *Queries) UpdatePortfolio(ctx context.Context, arg UpdatePortfolioParams) (Portfolio, error) {
	row := q.db.QueryRowContext(ctx, updatePortfolio, arg.ID, arg.Photo, arg.Aboutme)
	var i Portfolio
	err := row.Scan(&i.ID, &i.Photo, &i.Aboutme)
	return i, err
}
